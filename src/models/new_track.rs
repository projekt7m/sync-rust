/*
 * Synchronization Backend
 *
 * # API to communicate data changes with  This is the REST API of the P7M services, that can be used to get notified when data in the system changes, or to send notifications that data has changed.
 *
 * The version of the OpenAPI document: 0.1.1
 * Contact: tech@p7m.de
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NewTrack {
    /// The type of object that got changes (base URL without ID)
    #[serde(rename = "objectType")]
    pub object_type: String,
    /// The ID of the object that got changes
    #[serde(rename = "objectId")]
    pub object_id: uuid::Uuid,
    /// The type of modification that had been made to the object
    #[serde(rename = "modificationType")]
    pub modification_type: models::ModificationType,
    /// Identification of the part inside the object that got changes
    #[serde(rename = "part")]
    pub part: Vec<String>,
    /// Type of the modification that was done on the part
    #[serde(rename = "partModification", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub part_modification: Option<Option<models::ModificationType>>,
}

impl NewTrack {
    pub fn new(object_type: String, object_id: uuid::Uuid, modification_type: models::ModificationType, part: Vec<String>) -> NewTrack {
        NewTrack {
            object_type,
            object_id,
            modification_type,
            part,
            part_modification: None,
        }
    }
}

