/*
 * Synchronization Backend
 *
 * # API to communicate data changes with  This is the REST API of the P7M services, that can be used to get notified when data in the system changes, or to send notifications that data has changed.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: tech@p7m.de
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Track {
    /// Identification of this track record
    #[serde(rename = "trackId")]
    pub track_id: uuid::Uuid,
    /// The tenant this tracking belongs to
    #[serde(rename = "tenantId")]
    pub tenant_id: uuid::Uuid,
    /// The type of object that got changes (base URL without ID)
    #[serde(rename = "objectType")]
    pub object_type: String,
    /// The ID of the object that got changes
    #[serde(rename = "objectId")]
    pub object_id: uuid::Uuid,
    /// The type of modification that had been made to the object
    #[serde(rename = "modificationType")]
    pub modification_type: models::ModificationType,
    /// The ID of the actor that performed the modification
    #[serde(rename = "actorId")]
    pub actor_id: uuid::Uuid,
    /// The time when the modification happened
    #[serde(rename = "lastChange")]
    pub last_change: String,
}

impl Track {
    pub fn new(track_id: uuid::Uuid, tenant_id: uuid::Uuid, object_type: String, object_id: uuid::Uuid, modification_type: models::ModificationType, actor_id: uuid::Uuid, last_change: String) -> Track {
        Track {
            track_id,
            tenant_id,
            object_type,
            object_id,
            modification_type,
            actor_id,
            last_change,
        }
    }
}

